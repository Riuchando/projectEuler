//Author:Stephen Kinser
//Problem 12 from project euler
#include <iostream>
#include <math.h> /* sqrt */
/*
"
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?"
-Project Euler
*/

int main()
{
  int next;          // the number in the power series we are working with
  int answer = 0;    // the amount of numbers divisible by it
  int iteration = 1; // the position in the power series
  while (answer < 500)
  {
    answer = 0;                             // reset to 0 every time
    next = iteration * (iteration + 1) / 2; // how to get a certain position in the power series
    int upperbound = sqrt(next);            // only have to check half of the divisors
    /*
		say we have a number : 50
		if 50 is divisible by two: 50%2 ==0;
		then we can say that there exists a number that results in 2: 50%x ==2;
		we only need therefore to check up to the square root which by definition is when it is divided by itself
		results in the number eg: 144: 1,2,3 ,4 ,6,8,9,12
		*/
    for (int i = 1; i <= upperbound; i++)
    {
      if (next % i == 0)
      {
        answer += 2;
      }
    }
    iteration++;
  }
  std::cout << "Answer: " << next << "\n";

  return 0;
}